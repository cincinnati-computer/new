<?xml version="1.0" encoding="utf-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" width="400" height="400" version="1.1" viewBox="0 0 1 1" preserveAspectRatio="xMinYMin" aria-hidden="true">
	<g id="k">
		<defs>
			<linearGradient id="c" gradientTransform="rotate(-120)" transform-origin=".5.5">
				<stop offset="0%" stop-color="rgba(0,0,0,.6)"/>
				<stop offset="47%" stop-color="rgba(0,0,0,.6)"/>
				<stop offset="53%" stop-color="rgba(0,0,0,.3)"/>
				<stop offset="100%" stop-color="rgba(0,0,0,.9)"/>
			</linearGradient>
			<radialGradient id="d" r=".5" cy=".5" cx=".5">
				<stop offset="35%" stop-color="black"/>
				<stop offset="50%" stop-color="grey"/>
				<stop offset="65%" stop-color="black"/>
			</radialGradient>
			<radialGradient id="e" r=".5" cy=".5" cx=".5">
				<stop offset="0%" stop-color="white"/>
				<stop offset="25%" stop-color="yellow"/>
				<stop offset="75%" stop-color="yellow"/>
				<stop offset="100%" stop-color="white"/>
			</radialGradient>
			<clipPath id="f">
				<path stroke="grey" stroke-width=".01" id="b" d="M.75.71A.31.31 0 1 1 .75.31L.69.38A.22.22 0 1 0 .68.66L.56.57L.6.51L.82.68zM.6.63A.14.14 0 1 1 .62.42L.66.39A.19.19 0 1 0 .64.66zM.55.58A.07.07 0 1 1 .56.46L.6.43A.12.12 0 1 0 .59.61z"/>
			</clipPath>
			<clipPath id="g">
				<path stroke="grey" fill="red" stroke-width=".01" d="M.6.63A.14.14 0 1 1 .62.42L.66.39A.19.19 0 1 0 .64.66z"/>
			</clipPath>
		</defs>
		<g clip-path="url(#f)" fill="url(#c)">
			<rect x="0" y="0" width="1" height="1"/>
			<rect x="0" y="0" width="1" height="1" fill="red" clip-path="url(#g)"/>
		</g>
		<g transform="scale(1.1)" transform-origin=".5.5">
			<text>
				<textPath href="#b" font-size=".65%" font-family="monospace" letter-spacing="-.5%" style="white-space:pre"> GREATER <tspan fill="red">CINCINNATI</tspan> COMPUTER</textPath>
			</text>
		</g>
	</g>
	<canvas id="myAwesomeCanvas" style="display:none"></canvas>
	<script type="text/javascript" id="">//<![CDATA[
		(function(window, document, Math, frameRate){
			"use-strict";
			
			var pageSearchParams = new URLSearchParams(window.location.search.substr(1)),
				gradientChanges = [
					{
						element:	document.getElementById('c'),
						value:		'rotate($value)',
						attribute:	'gradientTransform',
						from:		240,
						to:			600,
						duration:	7000,
					}
				],
				gradientChangesLength = gradientChanges.length,
				totalFrames = 0,
				currentFrame = 0,
				i = 0,
				valueReplaceRegexp = /\$value/gm,
				frameInterval = 1000 / frameRate,
				allFrames = [],
				theSVG = document.documentElement,
				theCanvas = window.theCanvas = document.getElementById('myAwesomeCanvas'),
				canvasCtx = theCanvas.getContext('2d'),
				theSVGboundingClientRect = theSVG.getBoundingClientRect(),
				SVGlength = theSVGboundingClientRect.bottom - 
								theSVGboundingClientRect.top;
			theCanvas.width = theCanvas.height = SVGlength;
			
			for (i=gradientChangesLength; i--; ){
				totalFrames = Math.max(totalFrames, gradientChanges[i].duration / frameInterval)
				gradientChanges[i].range = (gradientChanges[i].to - gradientChanges[i].from);
				gradientChanges[i].increment =
					gradientChanges[i].range / gradientChanges[i].duration * frameInterval;
			}
			totalFrames = Math.round(totalFrames);
			
			var whenWindowLoads = function(){
				i = -1; var v=0;
				var theRepeatingFunc = function(x){
					i++;
					if (!(i%4)){
						if (i < totalFrames){
							v = gradientChangesLength;
							while (v--){
								var cur = gradientChanges[v].from + (i*gradientChanges[v].increment % gradientChanges[v].range);
								gradientChanges[v].element.setAttribute(
									gradientChanges[v].attribute,
									gradientChanges[v].value.replace(valueReplaceRegexp, cur)
								);
							}
							var myImg = new Image();
							myImg.width = myImg.height = SVGlength;
							myImg.src = 'data:image/svg+xml;base64,' + window.btoa(theSVG.outerHTML);
							myImg.onload = function(){
								canvasCtx.drawImage(myImg, 0, 0);
								allFrames[(i/4)|0] = canvasCtx.getImageData(0, 0, SVGlength, SVGlength);
							};
						} else {
							if (i === totalFrames) {
								theSVG.removeChild( document.getElementById('k') );
								theCanvas.style.display = 'block';
							}
							canvasCtx.putImageData(allFrames[(i/4)|0], 0, 0);
						}
					}
					requestAnimationFrame(theRepeatingFunc);
				};
				requestAnimationFrame(theRepeatingFunc);
			};
			window.addEventListener('load', whenWindowLoads);
		})(window, document, Math, 30);
	//]]></script>
</svg>